<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on TMC - 7 Digital Tech</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/</link><description>Recent content in Examples on TMC - 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/gemma/02examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Flash a light</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</guid><description>The first project you do with any new piece of hardware: flash a light.
from digitalio import DigitalInOut, Direction import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT while True: led.value = True time.sleep(0.5) led.value = False time.sleep(0.5)</description></item><item><title>Respond to input</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</guid><description>In this example, the light will turn on while you touch pin A2.
from digitalio import DigitalInOut, Direction from touchio import TouchIn import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Capacitive touch on A2 touch2 = TouchIn(board.A2) while True: led.value = touch2.value</description></item><item><title>A flash of colo(u)r</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</guid><description>The Gemma has a built-in (DotStar) RGB LED. DotStar LEDs can be chained together, and even though there is only one on the Gemma, we still refer to it as though it were on a chain, just a chain of one. Colors are set with an RGB tuple. The brightness can be configured between 0 and 1. Why would you want to lower the brightness? Here are three reasons:
maximum brightness is almost painfully bright, which is bad if you&amp;rsquo;re up close.</description></item><item><title>Color cycling</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</guid><description>The demo program that comes with the Gemma includes a nice function which generates a swirl through the rainbow. It takes a number from 0-255 and returns a color as a list (which you can use directly instead of specific color tuple).
# Helper to give us a nice color swirl def wheel(pos): # Input a value 0 to 255 to get a color value. # The colours are a transition r - g - b - back to r.</description></item><item><title>Touch keyboard</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</guid><description># Welcome to CircuitPython 5 :) import usb_hid from adafruit_hid.keyboard import Keyboard from adafruit_hid.keyboard_layout_us import KeyboardLayoutUS from adafruit_hid.keycode import Keycode from touchio import TouchIn import board import time # Capacitive touch on A2 touch0 = TouchIn(board.A0) touch1 = TouchIn(board.A1) touch2 = TouchIn(board.A2) # The keyboard object! Used if we do HID output, see below time.sleep(1) # Sleep for a bit to avoid a race condition on some systems keyboard = Keyboard(usb_hid.</description></item><item><title>Neopixels</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels/</guid><description> 1 2 3 4 5 6 7 8 9 10 11 12 import board import time import neopixel # LED strip pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) while True: pixels[0] = (255, 0, 0, 0) pixels[1] = (0, 255, 255, 0) pixels[2] = (0, 0, 0, 255)</description></item><item><title>Neopixels (Part 2)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels2/</guid><description>Let&amp;rsquo;s improve our code so now the lights respond to touch input.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.A2) # LED strip pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) while True: if touch.value: pixels[0] = (255, 0, 0, 0) pixels[1] = (0, 255, 255, 0) pixels[2] = (0, 0, 0, 255) else: pixels.</description></item><item><title>Neopixels (Part 3)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels3/</guid><description>At the moment, we need to hold down the touch pad to keep the lights onâ€”hardly a useful feature for a lamp! Let&amp;rsquo;s change that so that touching the touch pad changes the light from off to on, and back again.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 4)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels4/</guid><description>In part 3 we added a touch switch, but the processor in Gemma is so fast compared with our finger movements that it is nearly impossible to reliably turn it on or off. Let&amp;rsquo;s force the processor to wait until we&amp;rsquo;ve taken our finger off the touch switch before continuing, thus ensuring each touch registers only once.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 5)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels5/</guid><description>In part 4 we fixed the switching behaviour. Now let&amp;rsquo;s add some rainbow colour changing to our lights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 6)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels6/</guid><description>If you hold your finger down while the lights are on, the rainbow stops cycling. This is slightly disappointing. Let&amp;rsquo;s fix that, and at the same time prepare ourselves so we can have short presses and long presses.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 7)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels7/</guid><description>Let&amp;rsquo;s setup a list of colours for the other two lights to cycle through. We&amp;rsquo;ll also set up a variable that reminds us where in the cycle of colours we&amp;rsquo;re up to (like you might use your finger to keep track of which line you&amp;rsquo;re on when reading).
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Photocell</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/photocell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/photocell/</guid><description>from analogio import AnalogIn, AnalogOut import adafruit_dotstar as dotstar import board import time # One pixel connected internally! dot = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2, auto_write=True) # Analog input on A1 photocell = AnalogIn(board.A1) while True: print(photocell.value) time.sleep(0.1) if photocell.value &amp;gt; 300: dot[0] = (255, 255, 255) else: dot[0] = (100, 0, 0)</description></item><item><title>Vibration Sensor</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/vibration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/vibration/</guid><description>import time import neopixel import adafruit_dotstar import pulseio from analogio import AnalogIn import board def get_voltage(pin): return (pin.value * 3.3) / 65536 pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) vibrationPin = AnalogIn(board.A0) while True: vibration = get_voltage(vibrationPin) print(vibration) time.sleep(.1) if vibration &amp;lt; 0.81: # the sensor has been tripped, adjust this value pixels[0] = (255, 0, 0, 0) time.sleep(0.5) else: pixels[0] = (0, 255, 0, 0) pixels.fill(OFF)</description></item><item><title>Everything together</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/allTogether/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/allTogether/</guid><description>Let&amp;rsquo;s set up a list of colours for the three lights to cycle through. The first entry in the list will be ignored, and we&amp;rsquo;ll show cycling rainbows instead, so we&amp;rsquo;ll leave that dummy entry as black (all zero).
We&amp;rsquo;ll use the light sensor to decide whether to turn the lights on or off, and an available input as a touch sensor to change the colours.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import board import time import neopixel from touchio import TouchIn from analogio import AnalogIn, AnalogOut touch = TouchIn(board.</description></item><item><title>Built-in example</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</guid><description>2.2.4 # Gemma IO demo # Welcome to CircuitPython 2.2.4 :) from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode from digitalio import DigitalInOut, Direction, Pull from analogio import AnalogIn, AnalogOut from touchio import TouchIn import adafruit_dotstar as dotstar import microcontroller import board import time # One pixel connected internally! dot = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2) # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Analog output on A0 aout = AnalogOut(board.</description></item></channel></rss>