<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on TMC - 7 Digital Tech</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/</link><description>Recent content in Examples on TMC - 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/gemma/02examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Flash a light</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</guid><description>The first project you do with any new piece of hardware: flash a light.
from digitalio import DigitalInOut, Direction import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT while True: led.value = True time.sleep(0.5) led.value = False time.sleep(0.5)</description></item><item><title>Respond to input</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</guid><description>In this example, the light will turn on while you touch pin A2.
from digitalio import DigitalInOut, Direction from touchio import TouchIn import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Capacitive touch on A2 touch2 = TouchIn(board.A2) while True: led.value = touch2.value</description></item><item><title>A flash of colo(u)r</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</guid><description>The Gemma has a built-in (DotStar) RGB LED. DotStar LEDs can be chained together, and even though there is only one on the Gemma, we still refer to it as though it were on a chain, just a chain of one. Colors are set with an RGB tuple. The brightness can be configured between 0 and 1. Why would you want to lower the brightness? Here are three reasons:
maximum brightness is almost painfully bright, which is bad if you&amp;rsquo;re up close.</description></item><item><title>Color cycling</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</guid><description>The demo program that comes with the Gemma includes a nice function which generates a swirl through the rainbow. It takes a number from 0-255 and returns a color as a list (which you can use directly instead of specific color tuple).
# Helper to give us a nice color swirl def wheel(pos): # Input a value 0 to 255 to get a color value. # The colours are a transition r - g - b - back to r.</description></item><item><title>Touch keyboard</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</guid><description># Welcome to CircuitPython 5 :) import usb_hid from adafruit_hid.keyboard import Keyboard from adafruit_hid.keyboard_layout_us import KeyboardLayoutUS from adafruit_hid.keycode import Keycode from touchio import TouchIn import board import time # Capacitive touch on A2 touch0 = TouchIn(board.A0) touch1 = TouchIn(board.A1) touch2 = TouchIn(board.A2) # The keyboard object! Used if we do HID output, see below time.sleep(1) # Sleep for a bit to avoid a race condition on some systems keyboard = Keyboard(usb_hid.</description></item><item><title>Built-in example</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</guid><description>2.2.4 # Gemma IO demo # Welcome to CircuitPython 2.2.4 :) from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode from digitalio import DigitalInOut, Direction, Pull from analogio import AnalogIn, AnalogOut from touchio import TouchIn import adafruit_dotstar as dotstar import microcontroller import board import time # One pixel connected internally! dot = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2) # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Analog output on A0 aout = AnalogOut(board.</description></item></channel></rss>