<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning the basics on TMC - 7 Digital Tech</title><link>https://tmcdigitech.github.io/dit7/gemma/03basics/</link><description>Recent content in Learning the basics on TMC - 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/gemma/03basics/index.xml" rel="self" type="application/rss+xml"/><item><title>CircuitPython</title><link>https://tmcdigitech.github.io/dit7/gemma/03basics/circuitPython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/03basics/circuitPython/</guid><description>Let&amp;rsquo;s get something happening on your Gemma.
All of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you&amp;rsquo;re using) and run them as you go through this page.
Flash the built-in LED Flash the built-in RGB LED Respond to the capacitive input Capacitive input and the RGB LED Flash the built-in LED The first thing you try to get working on any embedded system is flashing a light.</description></item><item><title>Counters</title><link>https://tmcdigitech.github.io/dit7/gemma/03basics/counters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/03basics/counters/</guid><description>Embedded code like on a Gemma or Micro:bit often involves going around a main loop forever. We can&amp;rsquo;t use sleep/wait/delay functions because they&amp;rsquo;ll stop everything else from happening. We can use counters to make multiple actions seem to happen at once.
Here is an example. In this case, you can see in the flowchart below that we will use a counter called n, and initialise it to 0. Each time around the loop we will check if n has reached 1000 yet.</description></item></channel></rss>