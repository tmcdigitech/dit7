<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7 Digital Tech on TMC - 7 Digital Tech</title><link>https://tmcdigitech.github.io/dit7/</link><description>Recent content in 7 Digital Tech on TMC - 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/index.xml" rel="self" type="application/rss+xml"/><item><title>RELIEF LESSON</title><link>https://tmcdigitech.github.io/dit7/relief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/relief/</guid><description>Monday T2.9 (4 July)
Hi all. Today is a chance for you to show off your teamwork skills. Work your way through the Activities in Task 1 on your Microbit. If you get stuck, or things are not working, see if the people around you can help. The most likely problem you&amp;rsquo;ll make is spelling a word wrong, getting your capitals and lowercase letters mixed up, or using the wrong piece of punctuation.</description></item><item><title>CircuitPython</title><link>https://tmcdigitech.github.io/dit7/gemma/03basics/circuitPython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/03basics/circuitPython/</guid><description>Let&amp;rsquo;s get something happening on your Gemma.
All of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you&amp;rsquo;re using) and run them as you go through this page.
Flash the built-in LED Flash the built-in RGB LED Respond to the capacitive input Capacitive input and the RGB LED Flash the built-in LED The first thing you try to get working on any embedded system is flashing a light.</description></item><item><title>Task 1 - Algorithms and Coding</title><link>https://tmcdigitech.github.io/dit7/microbit/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/microbit/tasks/</guid><description>You will need to submit your code for each activity to the hand-in system (only accessible from the school network).
Sequencing
Activity 1.1, 1.2, 1.3, 1.4
Variables and Lists
Activity 2.1, 2.3, 2.2, 2.4, 2.5
Image design template
Iteration and Selection
Activity 3.1, 3.2, 3.3, 3.4
Accelerometer
Activity 4.1, 4.2, 4.3, 4.4, Extension
Music
Activity 5.1, 5.2, 5.3, Extension
Networking
Activity 6.1, 6.2, 6.3, 6.4, Extension
Working at home?
Try the Microbit simulator at create.</description></item><item><title>Counters</title><link>https://tmcdigitech.github.io/dit7/gemma/03basics/counters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/03basics/counters/</guid><description>Embedded code like on a Gemma or Micro:bit often involves going around a main loop forever. We can&amp;rsquo;t use sleep/wait/delay functions because they&amp;rsquo;ll stop everything else from happening. We can use counters to make multiple actions seem to happen at once.
Here is an example. In this case, you can see in the flowchart below that we will use a counter called n, and initialise it to 0. Each time around the loop we will check if n has reached 1000 yet.</description></item><item><title>Task 3 - Magic 8-ball</title><link>https://tmcdigitech.github.io/dit7/microbit/magic8ball/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/microbit/magic8ball/</guid><description>Using the Microbit, make a Magic 8-ball by following steps 1-5 below.
Ensure your app is working by carrying out testing and modifying your code. Include comments in your code and hand it in when finished.
The Magic 8-ball is a fortune telling toy created by Mattel in the 1950s. The concept is simple. Ask the 8-ball a yes or no question and the 8-ball will reply with answers such as “Yes”, “No”, “Without a doubt” etc.</description></item><item><title>Other things to try</title><link>https://tmcdigitech.github.io/dit7/microbit/extras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/microbit/extras/</guid><description>Light sensor from microbit.org
from microbit import * while True: if display.read_light_level() &amp;gt; 100: display.show(Image( &amp;#34;90909:&amp;#34; &amp;#34;09990:&amp;#34; &amp;#34;99999:&amp;#34; &amp;#34;09990:&amp;#34; &amp;#34;90909&amp;#34;)) else: display.clear() Max/min temperature recorder *from microbit.org
from microbit import * currentTemp = temperature() max = currentTemp min = currentTemp while True: display.show(&amp;#39;.&amp;#39;) currentTemp = temperature() if currentTemp &amp;lt; min: min = currentTemp if currentTemp &amp;gt; max: max = currentTemp if button_a.was_pressed(): display.scroll(min) if button_b.was_pressed(): display.scroll(max) sleep(1000) display.clear() sleep(1000) Teleporting duck from microbit.</description></item><item><title>Flash a light</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/flash/</guid><description>The first project you do with any new piece of hardware: flash a light.
from digitalio import DigitalInOut, Direction import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT while True: led.value = True time.sleep(0.5) led.value = False time.sleep(0.5)</description></item><item><title>Respond to input</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/respond/</guid><description>In this example, the light will turn on while you touch pin A2.
from digitalio import DigitalInOut, Direction from touchio import TouchIn import board import time # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Capacitive touch on A2 touch2 = TouchIn(board.A2) while True: led.value = touch2.value</description></item><item><title>A flash of colo(u)r</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/color/</guid><description>The Gemma has a built-in (DotStar) RGB LED. DotStar LEDs can be chained together, and even though there is only one on the Gemma, we still refer to it as though it were on a chain, just a chain of one. Colors are set with an RGB tuple. The brightness can be configured between 0 and 1. Why would you want to lower the brightness? Here are three reasons:
maximum brightness is almost painfully bright, which is bad if you&amp;rsquo;re up close.</description></item><item><title>Color cycling</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/colorWheel/</guid><description>The demo program that comes with the Gemma includes a nice function which generates a swirl through the rainbow. It takes a number from 0-255 and returns a color as a list (which you can use directly instead of specific color tuple).
# Helper to give us a nice color swirl def wheel(pos): # Input a value 0 to 255 to get a color value. # The colours are a transition r - g - b - back to r.</description></item><item><title>Touch keyboard</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/touchKeyboard/</guid><description># Welcome to CircuitPython 5 :) import usb_hid from adafruit_hid.keyboard import Keyboard from adafruit_hid.keyboard_layout_us import KeyboardLayoutUS from adafruit_hid.keycode import Keycode from touchio import TouchIn import board import time # Capacitive touch on A2 touch0 = TouchIn(board.A0) touch1 = TouchIn(board.A1) touch2 = TouchIn(board.A2) # The keyboard object! Used if we do HID output, see below time.sleep(1) # Sleep for a bit to avoid a race condition on some systems keyboard = Keyboard(usb_hid.</description></item><item><title>Neopixels</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels/</guid><description> 1 2 3 4 5 6 7 8 9 10 11 12 import board import time import neopixel # LED strip pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) while True: pixels[0] = (255, 0, 0, 0) pixels[1] = (0, 255, 255, 0) pixels[2] = (0, 0, 0, 255)</description></item><item><title>Neopixels (Part 2)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels2/</guid><description>Let&amp;rsquo;s improve our code so now the lights respond to touch input.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.A2) # LED strip pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) while True: if touch.value: pixels[0] = (255, 0, 0, 0) pixels[1] = (0, 255, 255, 0) pixels[2] = (0, 0, 0, 255) else: pixels.</description></item><item><title>Neopixels (Part 3)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels3/</guid><description>At the moment, we need to hold down the touch pad to keep the lights on—hardly a useful feature for a lamp! Let&amp;rsquo;s change that so that touching the touch pad changes the light from off to on, and back again.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 4)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels4/</guid><description>In part 3 we added a touch switch, but the processor in Gemma is so fast compared with our finger movements that it is nearly impossible to reliably turn it on or off. Let&amp;rsquo;s force the processor to wait until we&amp;rsquo;ve taken our finger off the touch switch before continuing, thus ensuring each touch registers only once.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 5)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels5/</guid><description>In part 4 we fixed the switching behaviour. Now let&amp;rsquo;s add some rainbow colour changing to our lights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 6)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels6/</guid><description>If you hold your finger down while the lights are on, the rainbow stops cycling. This is slightly disappointing. Let&amp;rsquo;s fix that, and at the same time prepare ourselves so we can have short presses and long presses.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Neopixels (Part 7)</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/neopixels7/</guid><description>Let&amp;rsquo;s setup a list of colours for the other two lights to cycle through. We&amp;rsquo;ll also set up a variable that reminds us where in the cycle of colours we&amp;rsquo;re up to (like you might use your finger to keep track of which line you&amp;rsquo;re on when reading).
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import board import time import neopixel from touchio import TouchIn touch = TouchIn(board.</description></item><item><title>Built-in example</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/builtInDemo/</guid><description>2.2.4 # Gemma IO demo # Welcome to CircuitPython 2.2.4 :) from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode from digitalio import DigitalInOut, Direction, Pull from analogio import AnalogIn, AnalogOut from touchio import TouchIn import adafruit_dotstar as dotstar import microcontroller import board import time # One pixel connected internally! dot = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2) # Built in red LED led = DigitalInOut(board.D13) led.direction = Direction.OUTPUT # Analog output on A0 aout = AnalogOut(board.</description></item><item><title/><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</guid><description/></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit7/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit7/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
Colors are described by the amount of red, green, and blue light to emit, using numbers in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:
(0, 150, 255) The built-in RGB LED on your Gemma (a DotStar) has these three color components, so we set its color in this way.</description></item><item><title>Cycling colours</title><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</guid><description>import time import neopixel import adafruit_dotstar import pulseio from analogio import AnalogIn import board pixpin = board.D0 numpix = 3 pixels = neopixel.NeoPixel(pixpin, numpix, brightness = 0.5, auto_write=True, pixel_order=neopixel.GRBW) dotstar = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) vibrationPin = AnalogIn(board.A0) def get_voltage(pin): return (pin.value * 3.3) / 65536 # Named colours RED = (255, 0 , 0, 0) BLUE = (0, 0, 255, 0) GREEN = (0, 255, 0, 0) OFF = (0, 0, 0, 0) # List of colours to cycle through colours = [RED, GREEN, BLUE, (255,0,255)] # Index of which colour in the list we&amp;#39;re on coloursIndex = 0 # Timer for when to print the vibration sensor value printTimer = 0 # Timer to make sure that we wait # for one vibration to have stopped # before we check for the next debounce = 0 # Timer for changing colours if we&amp;#39;re on colourTimer = 0 # Whether the light is on or not on = False # Turn lights off to start pixels.</description></item><item><title>import</title><link>https://tmcdigitech.github.io/dit7/glossary/import/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/import/</guid><description>Importing is the process of adding functions from additional libraries to support your program.
Imagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die.
The randint() function is included in the random library, but there are three ways we can import it, and each has its attractions.
import 1 2 3 4 import random num = random.</description></item><item><title>list</title><link>https://tmcdigitech.github.io/dit7/glossary/list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/list/</guid><description>A list is a data structure for storing a series of related pieces of information.
Defining a list Selecting elements Adding elements Removing elements Defining a list You can define a list using square brackets, with the elements separated by commas, like this:
squares = [0, 1, 4, 9, 16, 25, 36] vowels = [&amp;#34;a&amp;#34;, &amp;#34;e&amp;#34;, &amp;#34;i&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;u&amp;#34;] Selecting elements You can pick an element from the list like this: squares[0].</description></item><item><title>On-off lamp</title><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</guid><description>This example shows the basics of a state machine, also known by the more technical term finite state automaton. The idea is that the program is in a particular state, and certain events will cause a transition to another state.
In our case, our light is either on or off (the states), and we will transition between them with a big enough vibration reading. Here is a state diagram of this:</description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit7/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit7/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/teaching/siteUrl/</guid><description>https://tmcdigitech.github.io/dit7/</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/installation/</guid><description>To program you Gemma M0 or other CircuitPython compatible hardware, you will need to either:
use Mu, or use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generally very friendly to use and has a lot of features to help beginners get started. It also includes a Serial Monitor, meaning Mu will automatically display information sent back from your Gemma.</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/fileStructure/</guid><description>When you plug your Gemma in to your computer, it will appear as a USB drive (probably D:, unless you&amp;rsquo;ve got something else already plugged in). If you open the Gemma, you&amp;rsquo;ll see a file called code.py or main.py. This is the file that your Gemma will run. To change the program your Gemma is running, just edit this file!
D:/ ├── code.py # on newer versions ├── main.py # on older versions │ └── lib/ └── .</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit7/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).</description></item><item><title>type</title><link>https://tmcdigitech.github.io/dit7/glossary/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/type/</guid><description>Computers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.
Some common data types you&amp;rsquo;ll encounter are:
integers (int) Integers are whole numbers, and can be positive or negative. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent.</description></item><item><title>variable</title><link>https://tmcdigitech.github.io/dit7/glossary/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/variable/</guid><description>A variable is a named place to store a piece of information.</description></item><item><title>Vibration Sensor</title><link>https://tmcdigitech.github.io/dit7/gemma/02examples/vibration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02examples/vibration/</guid><description>import time import neopixel import adafruit_dotstar import pulseio from analogio import AnalogIn import board def get_voltage(pin): return (pin.value * 3.3) / 65536 pixels = neopixel.NeoPixel(board.D1, 3, brightness=1, auto_write=True, pixel_order=neopixel.GRBW) vibrationPin = AnalogIn(board.A0) while True: vibration = get_voltage(vibrationPin) print(vibration) time.sleep(.1) if vibration &amp;lt; 0.81: # the sensor has been tripped, adjust this value pixels[0] = (255, 0, 0, 0) time.sleep(0.5) else: pixels[0] = (0, 255, 0, 0) pixels.fill(OFF)</description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit7/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>