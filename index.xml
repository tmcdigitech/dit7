<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7 Digital Tech on TMC - 7 Digital Tech</title><link>https://tmcdigitech.github.io/dit7/</link><description>Recent content in 7 Digital Tech on TMC - 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/index.xml" rel="self" type="application/rss+xml"/><item><title>CircuitPython</title><link>https://tmcdigitech.github.io/dit7/gemma/02basics/circuitPython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02basics/circuitPython/</guid><description>Let&amp;rsquo;s get something happening on your Gemma.
All of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you&amp;rsquo;re using) and run them as you go through this page.
Flash the built-in LED Flash the built-in RGB LED Respond to the capacitive input Capacitive input and the RGB LED Flash the built-in LED The first thing you try to get working on any embedded system is flashing a light.</description></item><item><title>Counters</title><link>https://tmcdigitech.github.io/dit7/gemma/02basics/counters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/02basics/counters/</guid><description>Embedded code like on a Gemma or Micro:bit often involves going around a main loop forever. We can&amp;rsquo;t use sleep/wait/delay functions because they&amp;rsquo;ll stop everything else from happening. We can use counters to make multiple actions seem to happen at once.
Here is an example. In this case, you can see in the flowchart below that we will use a counter called n, and initialise it to 0. Each time around the loop we will check if n has reached 1000 yet.</description></item><item><title/><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</guid><description/></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit7/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit7/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
Colors are slightly different on the Gemma from most other programming environments. For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:</description></item><item><title>Cycling colours</title><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</guid><description>import time import neopixel import adafruit_dotstar import pulseio from analogio import AnalogIn import board pixpin = board.D0 numpix = 3 pixels = neopixel.NeoPixel(pixpin, numpix, brightness = 0.5, auto_write=True, pixel_order=neopixel.GRBW) dotstar = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) vibrationPin = AnalogIn(board.A0) def get_voltage(pin): return (pin.value * 3.3) / 65536 # Named colours RED = (255, 0 , 0, 0) BLUE = (0, 0, 255, 0) GREEN = (0, 255, 0, 0) OFF = (0, 0, 0, 0) # List of colours to cycle through colours = [RED, GREEN, BLUE, (255,0,255)] # Index of which colour in the list we&amp;#39;re on coloursIndex = 0 # Timer for when to print the vibration sensor value printTimer = 0 # Timer to make sure that we wait # for one vibration to have stopped # before we check for the next debounce = 0 # Timer for changing colours if we&amp;#39;re on colourTimer = 0 # Whether the light is on or not on = False # Turn lights off to start pixels.</description></item><item><title>import</title><link>https://tmcdigitech.github.io/dit7/glossary/import/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/import/</guid><description>Importing is the process of adding functions from additional libraries to support your program.
Imagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die.
The randint() function is included in the random library, but there are three ways we can import it, and each has its attractions.
import 1 2 3 4 import random num = random.</description></item><item><title>list</title><link>https://tmcdigitech.github.io/dit7/glossary/list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/list/</guid><description>A list is a data structure for storing a series of related pieces of information.
Defining a list Selecting elements Adding elements Removing elements Defining a list You can define a list using square brackets, with the elements separated by commas, like this:
squares = [0, 1, 4, 9, 16, 25, 36] vowels = [&amp;#34;a&amp;#34;, &amp;#34;e&amp;#34;, &amp;#34;i&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;u&amp;#34;] Selecting elements You can pick an element from the list like this: squares[0].</description></item><item><title>On-off lamp</title><link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</guid><description>This example shows the basics of a state machine, also known by the more technical term finite state automaton. The idea is that the program is in a particular state, and certain events will cause a transition to another state.
In our case, our light is either on or off (the states), and we will transition between them with a big enough vibration reading. Here is a state diagram of this:</description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit7/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Site URL ðŸ¡„ðŸ¡†</title><link>https://tmcdigitech.github.io/dit7/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/teaching/siteUrl/</guid><description>Learn about your Gemma here:
https://tmcdigitech.github.io/dit7/</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/installation/</guid><description>To program you Gemma M0 or other CircuitPython compatible hardware, you will need to either:
use Mu, or use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generally very friendly to use and has a lot of features to help beginners get started. It also includes a Serial Monitor, meaning Mu will automatically display information sent back from your Gemma.</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/gemma/01gettingStarted/fileStructure/</guid><description>When you plug your Gemma in to your computer, it will appear as a USB drive (probably D:, unless you&amp;rsquo;ve got something else already plugged in). If you open the Gemma, you&amp;rsquo;ll see a file called code.py or main.py. This is the file that your Gemma will run. To change the program your Gemma is running, just edit this file!
D:/ â”œâ”€â”€ code.py # on newer versions â”œâ”€â”€ main.py # on older versions â”‚ â””â”€â”€ lib/ â””â”€â”€ .</description></item><item><title>Task 1 - Algorithms and Coding</title><link>https://tmcdigitech.github.io/dit7/microbit/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/microbit/tasks/</guid><description>You will need to submit your code for each activity to the hand-in system (only accessible from the school network).
Sequencing Activity 1.1 Activity 1.2 Activity 1.3 Activity 1.4 Variables and Lists Activity 2.1 Activity 2.2 Activity 2.3 Activity 2.4 Activity 2.5 Iteration and Selection Activity 3.1 Activity 3.2 Activity 3.3 Activity 3.4 Accelerometer Activity 4.1 Activity 4.2 Activity 4.</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit7/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).</description></item><item><title>type</title><link>https://tmcdigitech.github.io/dit7/glossary/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/type/</guid><description>Computers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.
Some common data types you&amp;rsquo;ll encounter are:
integers (int) Integers are whole numbers, and can be positive or negative. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent.</description></item><item><title>variable</title><link>https://tmcdigitech.github.io/dit7/glossary/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/glossary/variable/</guid><description>A variable is a named place to store a piece of information.</description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit7/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit7/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>