<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project ideas on TMC - 7 Digital Tech</title>
    <link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/</link>
    <description>Recent content in Project ideas on TMC - 7 Digital Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit7/gemma/projectIdeas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/bikeLight/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cycling colours</title>
      <link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/cyclingColours/</guid>
      <description>import time import neopixel import adafruit_dotstar import pulseio from analogio import AnalogIn import board pixpin = board.D0 numpix = 3 pixels = neopixel.NeoPixel(pixpin, numpix, brightness = 0.5, auto_write=True, pixel_order=neopixel.GRBW) dotstar = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) vibrationPin = AnalogIn(board.A0) def get_voltage(pin): return (pin.value * 3.3) / 65536 # Named colours RED = (255, 0 , 0, 0) BLUE = (0, 0, 255, 0) GREEN = (0, 255, 0, 0) OFF = (0, 0, 0, 0) # List of colours to cycle through colours = [RED, GREEN, BLUE, (255,0,255)] # Index of which colour in the list we&amp;#39;re on coloursIndex = 0 # Timer for when to print the vibration sensor value printTimer = 0 # Timer to make sure that we wait # for one vibration to have stopped # before we check for the next debounce = 0 # Timer for changing colours if we&amp;#39;re on colourTimer = 0 # Whether the light is on or not on = False # Turn lights off to start pixels.</description>
    </item>
    
    <item>
      <title>On-off lamp</title>
      <link>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmcdigitech.github.io/dit7/gemma/projectIdeas/onOffLamp/</guid>
      <description>This example shows the basics of a state machine, also known by the more technical term finite state automaton. The idea is that the program is in a particular state, and certain events will cause a transition to another state.
In our case, our light is either on or off (the states), and we will transition between them with a big enough vibration reading. Here is a state diagram of this:</description>
    </item>
    
  </channel>
</rss>
