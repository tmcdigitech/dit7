[{"id":0,"href":"/gemma/02basics/circuitPython/","title":"CircuitPython","parent":"Learning the basics","content":"Let\u0026rsquo;s get something happening on your Gemma.\nAll of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you\u0026rsquo;re using) and run them as you go through this page.\nFlash the built-in LED    The first thing you try to get working on any embedded system is flashing a light. It\u0026rsquo;s amazing how much information you can convey with just a light if you get a little creative!\n1 2 3 4 5 6 7 8 9 10 11 12 13  import board import digitalio import time led = digitalio.DigitalInOut(board.LED) led.direction = digitalio.Direction.OUTPUT while True: led.value = True time.sleep(0.5) led.value = False time.sleep(0.5)   Lines 1-3 import various libraries that we will use. All of your Gemma programs will start with one or more of these import lines.\nLine 5 gives us a reference to the pin that the built-in LED (the red one) is connected to. We store that reference in a variable called led. Line 6 tells the Gemma that we want to use the pin we\u0026rsquo;ve called led as an output (to drive the red LED).\nLines 8-12 are an infinite loop. We turn the LED on, wait for half a second, turn it off, and wait another half second. Then we do it all again, and again, and so on.\nCheck your units\nNote that time.sleep() takes values in seconds, rather than milliseconds.\n If you\u0026rsquo;ve written this in Mu, it should look like this:\nFlash the built-in RGB LED    Now we\u0026rsquo;ve got something happening, let\u0026rsquo;s explore the built-in RGB LED. This model of LED is a Dotstar. The LEDs on the strip we\u0026rsquo;ll be using are a model called Neopixel.\n1 2 3 4 5 6 7 8 9 10 11  import board import adafruit_dotstar as dotstar import time dot = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2) while True: dot[0] = (255, 255, 0) time.sleep(0.5) dot[0] = (0, 0, 255) time.sleep(0.5)   Notice that we on line 5 we call the dotstar dot, but to use it we say dot[0]. That\u0026rsquo;s because Dotstars and Neopixels are designed to be chained together on a strip with common wires, and you need a way to talk to each one individually even though they share a signal wire. Since most counting in computers begins at zero, and there is just the one built-in dotstar, it is called dot[0]. The [] notation is to do with lists, which you used when programming the micro:bit.\n"},{"id":1,"href":"/gemma/01gettingStarted/","title":"Getting started","parent":"7 DigiTech","content":""},{"id":2,"href":"/gemma/02basics/","title":"Learning the basics","parent":"7 DigiTech","content":""},{"id":3,"href":"/gemma/glossary/","title":"Glossary","parent":"7 DigiTech","content":""},{"id":4,"href":"/gemma/troubleshooting/","title":"Troubleshooting","parent":"7 DigiTech","content":""},{"id":5,"href":"/gemma/reference/","title":"Reference materials","parent":"7 DigiTech","content":" Adafruit Gemma M0 site CircuitPython Firmware for Gemma M0 CircuitPython Libraries  v7 library files    "},{"id":6,"href":"/gemma/teaching/","title":"Teaching materials","parent":"7 DigiTech","content":""},{"id":7,"href":"/gemma/","title":"7 DigiTech","parent":"","content":"Welcome to Year 7 Digital Technology!\n"},{"id":8,"href":"/gemma/glossary/argument/","title":"argument","parent":"Glossary","content":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n"},{"id":9,"href":"/gemma/categories/","title":"Categories","parent":"7 DigiTech","content":""},{"id":10,"href":"/gemma/glossary/color/","title":"color/colour","parent":"Glossary","content":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nColors are slightly different on the Gemma from most other programming environments. For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) The built-in RGB LED on your Gemma (a Dotstar) has these three color components, so we set its color in this way.\nThe Neopixel RGB LEDs you will solder onto your Gemma have four components: the usual red, green, and blue and also white. So you if you wanted the above color on your Neopixel LED strip, you would use:\n(0, 150, 255, 0) Unless you want to set a particular LED pixel to be white in color, it is recommended that you set the white value to zero (0), as the white tends to wash out the colors otherwise.\nYou can use the Google Color Picker to find different colors, and then copy the RGB value listed. Don\u0026rsquo;t forget to add a value for the white (probably zero) after the other three numbers, if you are setting Neopixel colors.\n"},{"id":11,"href":"/gemma/glossary/parameter/","title":"parameter","parent":"Glossary","content":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n"},{"id":12,"href":"/gemma/teaching/siteUrl/","title":"Site URL ðŸ¡„ðŸ¡†","parent":"Teaching materials","content":"Learn about your Gemma here:\nhttps://tmcdigitech.github.io/gemma/\n"},{"id":13,"href":"/gemma/01gettingStarted/installation/","title":"Software","parent":"Getting started","content":"To program you Gemma M0 or other CircuitPython compatible hardware, you will need to either:\n use Mu, or use another editor  Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generally very friendly to use and has a lot of features to help beginners get started. It also includes a Serial Monitor, meaning Mu will automatically display information sent back from your Gemma.\nAfter you have been writing code for a while, you may find that a more powerful text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of complexity, and possibly doing some more basic things yourself.\nUsing Mu    Install Mu, using the Company Portal (on a school computer), or from the website.\nTo program your Gemma M0, make sure you select the mode CircuitPython (depending on your version, it may be called something slightly different, but it is the mode with \u0026lsquo;CircuitPython\u0026rsquo; somewhere in the title).\nUsing Visual Studio Code    Install Visual Studio Code from the Company Portal (on a school computer), or from the website.\n"},{"id":14,"href":"/gemma/01gettingStarted/fileStructure/","title":"Structuring your files","parent":"Getting started","content":"When you plug your Gemma in to your computer, it will appear as a USB drive (probably D:, unless you\u0026rsquo;ve got something else already plugged in). If you open the Gemma, you\u0026rsquo;ll see a file called code.py or main.py. This is the file that your Gemma will run. To change the program your Gemma is running, just edit this file!\nD:/ â”œâ”€â”€ code.py # on newer versions â”œâ”€â”€ main.py # on older versions â”‚ â””â”€â”€ lib/ â””â”€â”€ ... # library files, which tell the software how to control hardware we might connect "},{"id":15,"href":"/gemma/tags/","title":"Tags","parent":"7 DigiTech","content":""},{"id":16,"href":"/gemma/glossary/tuple/","title":"tuple","parent":"Glossary","content":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).\n"},{"id":17,"href":"/gemma/glossary/variable/","title":"variable","parent":"Glossary","content":"A variable is a named place to store a piece of information.\n"},{"id":18,"href":"/gemma/troubleshooting/01whybroken/","title":"Why won't my program work?","parent":"Troubleshooting","content":"Here is a checklist of things to look for if something is wrong\u0026hellip;\nSpelling and Capitalisation    Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.\n"}]